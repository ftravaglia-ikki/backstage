import { __rest } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import Box from '@material-ui/core/Box';
import Grid from '@material-ui/core/Grid';
import Paper from '@material-ui/core/Paper';
import { getTemplate, getUiOptions, } from '@rjsf/utils';
/** The `ArrayFieldTemplate` component is the template used to render all items in an array.
 *
 * @param props - The `ArrayFieldTemplateItemType` props for the component
 */
export default function ArrayFieldTemplate(props) {
    const { canAdd, disabled, idSchema, uiSchema, items, onAddClick, readonly, registry, required, schema, title } = props;
    const uiOptions = getUiOptions(uiSchema);
    const ArrayFieldDescriptionTemplate = getTemplate('ArrayFieldDescriptionTemplate', registry, uiOptions);
    const ArrayFieldItemTemplate = getTemplate('ArrayFieldItemTemplate', registry, uiOptions);
    const ArrayFieldTitleTemplate = getTemplate('ArrayFieldTitleTemplate', registry, uiOptions);
    // Button templates are not overridden in the uiSchema
    const { ButtonTemplates: { AddButton }, } = registry.templates;
    return (_jsx(Paper, Object.assign({ elevation: 2 }, { children: _jsxs(Box, Object.assign({ p: 2 }, { children: [_jsx(ArrayFieldTitleTemplate, { idSchema: idSchema, title: uiOptions.title || title, schema: schema, uiSchema: uiSchema, required: required, registry: registry }), _jsx(ArrayFieldDescriptionTemplate, { idSchema: idSchema, description: uiOptions.description || schema.description, schema: schema, uiSchema: uiSchema, registry: registry }), _jsxs(Grid, Object.assign({ container: true }, { children: [items &&
                            items.map((_a) => {
                                var { key } = _a, itemProps = __rest(_a, ["key"]);
                                return (_jsx(ArrayFieldItemTemplate, Object.assign({}, itemProps), key));
                            }), canAdd && (_jsx(Grid, Object.assign({ container: true, justifyContent: 'flex-end' }, { children: _jsx(Grid, Object.assign({ item: true }, { children: _jsx(Box, Object.assign({ mt: 2 }, { children: _jsx(AddButton, { className: 'array-item-add', onClick: onAddClick, disabled: disabled || readonly, uiSchema: uiSchema, registry: registry }) })) })) })))] }), `array-item-list-${idSchema.$id}`)] })) })));
}
//# sourceMappingURL=ArrayFieldTemplate.js.map